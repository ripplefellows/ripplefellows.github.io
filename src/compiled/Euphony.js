// Generated by CoffeeScript 1.10.0
(function() {
  var Euphony,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Euphony = (function() {
    function Euphony() {
      this.setProgress = bind(this.setProgress, this);
      this.setCurrentTime = bind(this.setCurrentTime, this);
      this.getEndTime = bind(this.getEndTime, this);
      this.pause = bind(this.pause, this);
      this.stop = bind(this.stop, this);
      this.resume = bind(this.resume, this);
      this.start = bind(this.start, this);
      this.design = new PianoKeyboardDesign();
      this.keyboard = new PianoKeyboard(this.design);
      this.rain = new NoteRain(this.design);
      this.particles = new NoteParticles(this.design);
      this.player = MIDI.Player;
      this.player.addListener((function(_this) {
        return function(data) {
          var NOTE_OFF, NOTE_ON, message, note;
          NOTE_OFF = 128;
          NOTE_ON = 144;
          note = data.note, message = data.message;
          if (message === NOTE_ON) {
            _this.keyboard.press(note);
            return _this.particles.createParticles(note);
          } else if (message === NOTE_OFF) {
            return _this.keyboard.release(note);
          }
        };
      })(this));
      this.player.setAnimation({
        delay: 20,
        callback: (function(_this) {
          return function(data) {
            var end, now;
            now = data.now, end = data.end;
            if (typeof _this.onprogress === "function") {
              _this.onprogress({
                current: now,
                total: end
              });
            }
            return _this.rain.update(now * 1000);
          };
        })(this)
      });
    }

    Euphony.prototype.initScene = function() {
      this.scene = new Scene('#canvas');
      this.scene.add(this.keyboard.model);
      this.scene.add(this.rain.model);
      this.scene.add(this.particles.model);
      return this.scene.animate((function(_this) {
        return function() {
          _this.keyboard.update();
          return _this.particles.update();
        };
      })(this));
    };

    Euphony.prototype.initMidi = function(callback) {
      return MIDI.loadPlugin(function() {
        MIDI.channels[9].mute = true;
        return typeof callback === "function" ? callback() : void 0;
      });
    };

    Euphony.prototype.loadBuiltinPlaylist = function(callback) {
      if (this.playlist) {
        return callback(this.playlist);
      }
      return $.getJSON('tracks/index.json', (function(_this) {
        return function(playlist) {
          _this.playlist = playlist;
          return callback(_this.playlist);
        };
      })(this));
    };

    Euphony.prototype.loadBuiltinMidi = function(id, callback) {
      if (!((0 <= id && id < this.playlist.length))) {
        return;
      }
      if (typeof localStorage !== "undefined" && localStorage !== null ? localStorage[id] : void 0) {
        return this.loadMidiFile(localStorage[id], callback);
      }
      return $.ajax({
        url: "tracks/" + this.playlist[id],
        dataType: 'text',
        success: (function(_this) {
          return function(data) {
            var e, error;
            _this.loadMidiFile(data, callback);
            try {
              return typeof localStorage !== "undefined" && localStorage !== null ? localStorage[id] = data : void 0;
            } catch (error) {
              e = error;
              return typeof console !== "undefined" && console !== null ? console.error('localStorage quota limit reached') : void 0;
            }
          };
        })(this)
      });
    };

    Euphony.prototype.loadMidiFile = function(midiFile, callback) {
      return this.player.loadFile(midiFile, (function(_this) {
        return function() {
          return _this.rain.setMidiData(_this.player.data, callback);
        };
      })(this));
    };

    Euphony.prototype.start = function() {
      this.player.start();
      return this.playing = true;
    };

    Euphony.prototype.resume = function() {
      this.player.currentTime += 1e-6;
      this.player.resume();
      return this.playing = true;
    };

    Euphony.prototype.stop = function() {
      this.player.stop();
      return this.playing = false;
    };

    Euphony.prototype.pause = function() {
      this.player.pause();
      return this.playing = false;
    };

    Euphony.prototype.getEndTime = function() {
      return this.player.endTime;
    };

    Euphony.prototype.setCurrentTime = function(currentTime) {
      this.player.pause();
      this.player.currentTime = currentTime;
      if (this.playing) {
        return this.player.resume();
      }
    };

    Euphony.prototype.setProgress = function(progress) {
      var currentTime;
      currentTime = this.player.endTime * progress;
      return this.setCurrentTime(currentTime);
    };

    Euphony.prototype.on = function(eventName, callback) {
      return this["on" + eventName] = callback;
    };

    return Euphony;

  })();

  this.Euphony = Euphony;

}).call(this);
